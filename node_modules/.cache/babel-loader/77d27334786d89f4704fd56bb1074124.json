{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\denis\\\\Project\\\\goit-react-hw-03-image-finder\\\\src\\\\components\\\\ImageGallery\\\\ImageGallery.jsx\";\nimport React, { Component } from 'react';\nimport css from './ImageGallery.module.css';\nimport { fetchImages } from '../../servises/api-images.js';\nimport { ImageGalleryItem } from 'components/ImageGalleryItem/ImageGalleryItem';\nimport { Button } from 'components/Button/Button';\nimport { Loader } from 'components/Loader/Loader';\nimport { Modal } from '../Modal/Modal';\nimport { warnNoImages, noImagesFound, errorToastify } from '../Notifix/Notifix';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class ImageGallery extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      searchName: '',\n      images: [],\n      page: 1,\n      loading: false,\n      error: null,\n      status: 'idle',\n      showButton: false,\n      showModal: false,\n      selectedImageUrl: '',\n      alt: ''\n    };\n\n    this.handleLoadMore = () => {\n      const page = this.state.page;\n      const name = this.props.searchName.searchName;\n      fetchImages(name, page).then(newImages => {\n        this.setState({\n          images: [...this.state.images, ...newImages.hits],\n          page: page + 1,\n          status: 'resolved',\n          loading: false\n        });\n\n        if (Math.ceil(newImages.totalHits / 12) === page) {\n          warnNoImages();\n          this.setState({\n            showButton: false\n          });\n        }\n      }).catch(error => this.setState({\n        error,\n        status: 'rejected',\n        loading: false\n      }));\n    };\n\n    this.openModal = (imageUrl, tags) => {\n      this.setState({\n        showModal: true,\n        selectedImageUrl: imageUrl,\n        alt: tags\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        showModal: false,\n        selectedImageUrl: ''\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevName = prevProps.searchName;\n    const newName = this.props.searchName;\n    console.log('newName: ', newName);\n\n    if (prevName !== newName) {\n      this.setState({\n        status: 'pending'\n      });\n      const page = 1;\n      setTimeout(() => {\n        fetchImages(newName, page).then(newImages => {\n          if (newImages.hits.length === 0) {\n            noImagesFound(newName);\n            return this.setState({\n              status: 'idle',\n              loading: false\n            });\n          }\n\n          this.setState({\n            images: newImages.hits,\n            page: page + 1,\n            status: 'resolved',\n            loading: false,\n            showButton: true\n          });\n\n          if (Math.ceil(newImages.totalHits / 12) === page) {\n            warnNoImages();\n            this.setState({\n              showButton: false\n            });\n          }\n        }).catch(error => this.setState({\n          error,\n          status: 'rejected',\n          loading: false\n        }));\n      }, 1000);\n    }\n  }\n\n  render() {\n    const {\n      images,\n      status,\n      showButton,\n      showModal,\n      selectedImageUrl,\n      alt\n    } = this.state;\n    const {\n      openModal,\n      handleLoadMore,\n      closeModal\n    } = this;\n\n    if (status === 'pending') {\n      return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 16\n      }, this);\n    }\n\n    if (status === 'rejected') {\n      errorToastify();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"An error has occurred, please try again!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 16\n      }, this);\n    }\n\n    if (status === 'resolved') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: css.ImageGallery,\n          children: images.map(_ref => {\n            let {\n              id,\n              largeImageURL,\n              tags\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(ImageGalleryItem, {\n              src: largeImageURL,\n              alt: tags,\n              onClick: () => openModal(largeImageURL, tags)\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), showButton && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleLoadMore,\n          children: \"Load more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 28\n        }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n          imageUrl: selectedImageUrl,\n          alt: alt,\n          onClose: closeModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true);\n    }\n  }\n\n}\nImageGallery.propTypes = {\n  searchName: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["C:/Users/denis/Project/goit-react-hw-03-image-finder/src/components/ImageGallery/ImageGallery.jsx"],"names":["React","Component","css","fetchImages","ImageGalleryItem","Button","Loader","Modal","warnNoImages","noImagesFound","errorToastify","PropTypes","ImageGallery","state","searchName","images","page","loading","error","status","showButton","showModal","selectedImageUrl","alt","handleLoadMore","name","props","then","newImages","setState","hits","Math","ceil","totalHits","catch","openModal","imageUrl","tags","closeModal","componentDidUpdate","prevProps","prevState","prevName","newName","console","log","setTimeout","length","render","map","id","largeImageURL","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport css from './ImageGallery.module.css';\r\nimport {fetchImages} from '../../servises/api-images.js';\r\nimport { ImageGalleryItem } from 'components/ImageGalleryItem/ImageGalleryItem';\r\nimport { Button } from 'components/Button/Button';\r\nimport { Loader } from 'components/Loader/Loader';\r\nimport {Modal} from '../Modal/Modal';\r\nimport { warnNoImages, noImagesFound, errorToastify } from '../Notifix/Notifix';\r\nimport PropTypes from 'prop-types';\r\n\r\n  export class ImageGallery extends Component {\r\n    state = {\r\n      searchName: '',\r\n      images: [],\r\n      page: 1,\r\n      loading: false,\r\n      error: null,\r\n      status: 'idle',\r\n      showButton: false,\r\n      showModal: false,\r\n      selectedImageUrl: '',\r\n      alt: '',\r\n    };\r\n\r\n    static propTypes = {\r\n      searchName: PropTypes.string.isRequired,\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n      const prevName = prevProps.searchName;\r\n      const newName = this.props.searchName;\r\n      console.log('newName: ', newName);\r\n      if (prevName !== newName) {\r\n        this.setState({ status: 'pending' });\r\n        const page = 1;\r\n        setTimeout(() => {\r\n          fetchImages(newName, page)\r\n            .then(newImages => {\r\n              if (newImages.hits.length === 0) {\r\n                noImagesFound(newName);\r\n                return this.setState({\r\n                  status: 'idle',\r\n                  loading: false,\r\n                });\r\n              }\r\n              this.setState({\r\n                images: newImages.hits,\r\n                page: page + 1,\r\n                status: 'resolved',\r\n                loading: false,\r\n                showButton: true,\r\n              });\r\n\r\n              if (Math.ceil(newImages.totalHits / 12) === page) {\r\n                warnNoImages();\r\n                this.setState({\r\n                  showButton: false,\r\n                });\r\n              }\r\n            })\r\n            .catch(error =>\r\n              this.setState({ error, status: 'rejected', loading: false })\r\n            );\r\n        }, 1000);\r\n      }\r\n    }\r\n\r\n    handleLoadMore = () => {\r\n      const page = this.state.page;\r\n      const name = this.props.searchName.searchName;\r\n      fetchImages(name, page)\r\n        .then(newImages => {\r\n          this.setState({\r\n            images: [...this.state.images, ...newImages.hits],\r\n            page: page + 1,\r\n            status: 'resolved',\r\n            loading: false,\r\n          });\r\n          if (Math.ceil(newImages.totalHits / 12) === page) {\r\n            warnNoImages();\r\n            this.setState({\r\n              showButton: false,\r\n            });\r\n          }\r\n        })\r\n        .catch(error =>\r\n          this.setState({ error, status: 'rejected', loading: false })\r\n        );\r\n    };\r\n\r\n    openModal = (imageUrl, tags) => {\r\n      this.setState({ showModal: true, selectedImageUrl: imageUrl, alt: tags });\r\n    };\r\n\r\n    closeModal = () => {\r\n      this.setState({ showModal: false, selectedImageUrl: '' });\r\n    };\r\n\r\n    render() {\r\n      const { images, status, showButton, showModal, selectedImageUrl, alt } =\r\n        this.state;\r\n      const { openModal, handleLoadMore, closeModal } = this;\r\n\r\n      if (status === 'pending') {\r\n        return <Loader />;\r\n      }\r\n\r\n      if (status === 'rejected') {\r\n        errorToastify();\r\n        return <div>An error has occurred, please try again!</div>;\r\n      }\r\n\r\n      if (status === 'resolved') {\r\n        return (\r\n          <>\r\n            <ul className={css.ImageGallery}>\r\n              {images.map(({ id, largeImageURL, tags }) => (\r\n                <ImageGalleryItem\r\n                  key={id}\r\n                  src={largeImageURL}\r\n                  alt={tags}\r\n                  onClick={() => openModal(largeImageURL, tags)}\r\n                />\r\n              ))}\r\n            </ul>\r\n            {showButton && <Button onClick={handleLoadMore}>Load more</Button>}\r\n\r\n            {showModal && (\r\n              <Modal\r\n                imageUrl={selectedImageUrl}\r\n                alt={alt}\r\n                onClose={closeModal}\r\n              />\r\n            )}\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\denis\\\\Project\\\\goit-react-hw-03-image-finder\\\\src\\\\components\\\\ImageGallery\\\\ImageGallery.jsx\";\nimport React, { Component } from 'react';\nimport css from './ImageGallery.module.css';\nimport { fetchImages } from '../../servises/api-images.js';\nimport { ImageGalleryItem } from 'components/ImageGalleryItem/ImageGalleryItem';\nimport { Button } from 'components/Button/Button';\nimport { Loader } from 'components/Loader/Loader';\nimport { Modal } from '../Modal/Modal';\nimport { warnNoImages, noImagesFound, errorToastify } from '../Notifix/Notifix';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class ImageGallery extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleLoadMore = () => {\n      const page = this.state.page;\n      const name = this.props.searchName.searchName;\n      fetchImages(name, page).then(newImages => {\n        this.setState({\n          images: [...this.state.images, ...newImages.hits],\n          page: page + 1,\n          status: 'resolved',\n          loading: false\n        });\n\n        if (Math.ceil(newImages.totalHits / 12) === page) {\n          warnNoImages();\n          this.setState({\n            showButton: false\n          });\n        }\n      }).catch(error => this.setState({\n        error,\n        status: 'rejected',\n        loading: false\n      }));\n    };\n\n    this.openModal = (imageUrl, tags) => {\n      this.setState({\n        showModal: true,\n        selectedImageUrl: imageUrl,\n        alt: tags\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        showModal: false,\n        selectedImageUrl: ''\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevName = prevProps.searchName;\n    const newName = this.props.searchName;\n    console.log('newName: ', newName);\n\n    if (prevName !== newName) {\n      this.setState({\n        status: 'pending'\n      });\n      const page = 1;\n      setTimeout(() => {\n        fetchImages(newName, page).then(newImages => {\n          if (newImages.hits.length === 0) {\n            noImagesFound(newName);\n            return this.setState({\n              status: 'idle',\n              loading: false\n            });\n          }\n\n          this.setState({\n            images: newImages.hits,\n            page: page + 1,\n            status: 'resolved',\n            loading: false,\n            showButton: true\n          });\n\n          if (Math.ceil(newImages.totalHits / 12) === page) {\n            warnNoImages();\n            this.setState({\n              showButton: false\n            });\n          }\n        }).catch(error => this.setState({\n          error,\n          status: 'rejected',\n          loading: false\n        }));\n      }, 1000);\n    }\n  }\n\n  render() {\n    const {\n      images,\n      status,\n      showButton,\n      showModal,\n      selectedImageUrl,\n      alt\n    } = this.state;\n    const {\n      openModal,\n      handleLoadMore,\n      closeModal\n    } = this;\n\n    if (status === 'pending') {\n      return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 16\n      }, this);\n    }\n\n    if (status === 'rejected') {\n      errorToastify();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"An error has occurred, please try again!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 16\n      }, this);\n    }\n\n    if (status === 'resolved') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: css.ImageGallery,\n          children: images.map(_ref => {\n            let {\n              id,\n              largeImageURL,\n              tags\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(ImageGalleryItem, {\n              src: largeImageURL,\n              alt: tags,\n              onClick: () => openModal(largeImageURL, tags)\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), showButton && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleLoadMore,\n          children: \"Load more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 28\n        }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n          imageUrl: selectedImageUrl,\n          alt: alt,\n          onClose: closeModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/denis/Project/goit-react-hw-03-image-finder/src/components/ImageGallery/ImageGallery.jsx"],"names":["React","Component","css","fetchImages","ImageGalleryItem","Button","Loader","Modal","warnNoImages","noImagesFound","errorToastify","PropTypes","ImageGallery","handleLoadMore","page","state","name","props","searchName","then","newImages","setState","images","hits","status","loading","Math","ceil","totalHits","showButton","catch","error","openModal","imageUrl","tags","showModal","selectedImageUrl","alt","closeModal","componentDidUpdate","prevProps","prevState","prevName","newName","console","log","setTimeout","length","render","map","id","largeImageURL"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport css from './ImageGallery.module.css';\r\nimport {fetchImages} from '../../servises/api-images.js';\r\nimport { ImageGalleryItem } from 'components/ImageGalleryItem/ImageGalleryItem';\r\nimport { Button } from 'components/Button/Button';\r\nimport { Loader } from 'components/Loader/Loader';\r\nimport {Modal} from '../Modal/Modal';\r\nimport { warnNoImages, noImagesFound, errorToastify } from '../Notifix/Notifix';\r\nimport PropTypes from 'prop-types';\r\n\r\n  export class ImageGallery extends Component {\r\n\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n      const prevName = prevProps.searchName;\r\n      const newName = this.props.searchName;\r\n      console.log('newName: ', newName);\r\n      if (prevName !== newName) {\r\n        this.setState({ status: 'pending' });\r\n        const page = 1;\r\n        setTimeout(() => {\r\n          fetchImages(newName, page)\r\n            .then(newImages => {\r\n              if (newImages.hits.length === 0) {\r\n                noImagesFound(newName);\r\n                return this.setState({\r\n                  status: 'idle',\r\n                  loading: false,\r\n                });\r\n              }\r\n              this.setState({\r\n                images: newImages.hits,\r\n                page: page + 1,\r\n                status: 'resolved',\r\n                loading: false,\r\n                showButton: true,\r\n              });\r\n\r\n              if (Math.ceil(newImages.totalHits / 12) === page) {\r\n                warnNoImages();\r\n                this.setState({\r\n                  showButton: false,\r\n                });\r\n              }\r\n            })\r\n            .catch(error =>\r\n              this.setState({ error, status: 'rejected', loading: false })\r\n            );\r\n        }, 1000);\r\n      }\r\n    }\r\n\r\n    handleLoadMore = () => {\r\n      const page = this.state.page;\r\n      const name = this.props.searchName.searchName;\r\n      fetchImages(name, page)\r\n        .then(newImages => {\r\n          this.setState({\r\n            images: [...this.state.images, ...newImages.hits],\r\n            page: page + 1,\r\n            status: 'resolved',\r\n            loading: false,\r\n          });\r\n          if (Math.ceil(newImages.totalHits / 12) === page) {\r\n            warnNoImages();\r\n            this.setState({\r\n              showButton: false,\r\n            });\r\n          }\r\n        })\r\n        .catch(error =>\r\n          this.setState({ error, status: 'rejected', loading: false })\r\n        );\r\n    };\r\n\r\n    openModal = (imageUrl, tags) => {\r\n      this.setState({ showModal: true, selectedImageUrl: imageUrl, alt: tags });\r\n    };\r\n\r\n    closeModal = () => {\r\n      this.setState({ showModal: false, selectedImageUrl: '' });\r\n    };\r\n\r\n    render() {\r\n      const { images, status, showButton, showModal, selectedImageUrl, alt } =\r\n        this.state;\r\n      const { openModal, handleLoadMore, closeModal } = this;\r\n\r\n      if (status === 'pending') {\r\n        return <Loader />;\r\n      }\r\n\r\n      if (status === 'rejected') {\r\n        errorToastify();\r\n        return <div>An error has occurred, please try again!</div>;\r\n      }\r\n\r\n      if (status === 'resolved') {\r\n        return (\r\n          <>\r\n            <ul className={css.ImageGallery}>\r\n              {images.map(({ id, largeImageURL, tags }) => (\r\n                <ImageGalleryItem\r\n                  key={id}\r\n                  src={largeImageURL}\r\n                  alt={tags}\r\n                  onClick={() => openModal(largeImageURL, tags)}\r\n                />\r\n              ))}\r\n            </ul>\r\n            {showButton && <Button onClick={handleLoadMore}>Load more</Button>}\r\n\r\n            {showModal && (\r\n              <Modal\r\n                imageUrl={selectedImageUrl}\r\n                alt={alt}\r\n                onClose={closeModal}\r\n              />\r\n            )}\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}
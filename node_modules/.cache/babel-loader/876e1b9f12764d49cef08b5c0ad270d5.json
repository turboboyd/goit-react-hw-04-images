{"ast":null,"code":"export const API = function fetchImages(name, page, key) {\n  this.setState({\n    loading: true\n  });\n  return fetch(`https://pixabay.com/api/?q=${name}&page=${page}&key=${key}&image_type=photo&orientation=horizontal&per_page=12`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error('Пусто 2'));\n  }).then(data => {\n    this.setState({\n      imagesSearch: data.hits,\n      // Append new images to the existing imagesSearch\n      status: 'resolved',\n      loading: false\n    });\n  }).catch(error => this.setState({\n    error,\n    status: 'rejected',\n    loading: false\n  }));\n};\n_c = API;\n\nvar _c;\n\n$RefreshReg$(_c, \"API\");","map":{"version":3,"sources":["C:/Users/denis/Project/goit-react-hw-03-image-finder/src/servises/api-images.js"],"names":["API","fetchImages","name","page","key","setState","loading","fetch","then","res","ok","json","Promise","reject","Error","data","imagesSearch","hits","status","catch","error"],"mappings":"AAAA,OAAO,MAAMA,GAAG,GAAG,SAASC,WAAT,CAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCC,GAAlC,EAAuC;AACxD,OAAKC,QAAL,CAAc;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAd;AAEA,SAAOC,KAAK,CACT,8BAA6BL,IAAK,SAAQC,IAAK,QAAOC,GAAI,sDADjD,CAAL,CAGJI,IAHI,CAGCC,GAAG,IAAI;AACX,QAAIA,GAAG,CAACC,EAAR,EAAY;AACV,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,SAAV,CAAf,CAAP;AACD,GARI,EASJN,IATI,CASCO,IAAI,IAAI;AACZ,SAAKV,QAAL,CAAc;AACZW,MAAAA,YAAY,EAAED,IAAI,CAACE,IADP;AACa;AACzBC,MAAAA,MAAM,EAAE,UAFI;AAGZZ,MAAAA,OAAO,EAAE;AAHG,KAAd;AAKD,GAfI,EAgBJa,KAhBI,CAgBEC,KAAK,IACV,KAAKf,QAAL,CAAc;AAAEe,IAAAA,KAAF;AAASF,IAAAA,MAAM,EAAE,UAAjB;AAA6BZ,IAAAA,OAAO,EAAE;AAAtC,GAAd,CAjBG,CAAP;AAmBD,CAtBM;KAAMN,G","sourcesContent":["export const API = function fetchImages (name, page, key) {\r\n  this.setState({ loading: true });\r\n\r\n  return fetch(\r\n    `https://pixabay.com/api/?q=${name}&page=${page}&key=${key}&image_type=photo&orientation=horizontal&per_page=12`\r\n  )\r\n    .then(res => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(new Error('Пусто 2'));\r\n    })\r\n    .then(data => {\r\n      this.setState({\r\n        imagesSearch: data.hits, // Append new images to the existing imagesSearch\r\n        status: 'resolved',\r\n        loading: false,\r\n      });\r\n    })\r\n    .catch(error =>\r\n      this.setState({ error, status: 'rejected', loading: false })\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}